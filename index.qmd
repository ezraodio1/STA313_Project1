---
title: "Taylor Swift (Soon-to-be Kelce)"
subtitle: "STA/ISS 313 - Project 1"
author: "Team Robots ðŸ¤–"
format: html
editor: visual
---

## Abstract

(1 paragraph): Project abstract.

------------------------------------------------------------------------

## Introduction

This project analyzes the Taylor Swift R package, which was created by W. Jake Thompson. The data comes from Genius and the Spotify API. The data set includes three .csv files: taylor_album_songs, taylor_all_songs, and taylor_albums. In our project, we only are only using the taylor_all_songs and taylor_albums data frames. This is because taylor_album_songs excludes singles releases and excludes the original releases of albums that now have a Taylor-owned alternative in support of artists wanting to own their own music; in our project, we wanted to include the original releases so we could compare them to the re-releases, and overall, provide a holisitic analysis of Talyor Swift overtime. Additionally, this project uses the taylor_albums dataset - in order to have data about each albums as a whole.

This project seeks to investigate two questions: The first being: How do Taylor Swiftâ€™s single releases differ from the songs on the full albums? Second, we explore: How have Taylor Swiftâ€™s songs changed over time? The variables used to answer these questions are from the two .csv files mentioned above. From taylor_albums, we used : album_name (Album name), album_release (Album release date), metacritic_score (Metacritic score), and user_score (User score). From taylor_all_songs, we used : album_name (Album name), album_release (Album release date), single_release (Single release date), energy (Spotify energy score - a measure from 0.0 to 1.0 that represents a perceptual measure of intensity and activity), valence (Spotify valence score from 0.0 to 1.0 - high valence sounds more positive, while low valence sounds more negative), and tempo (The overall estimated tempo of a track in beats per minute). More information about the data sets can be found in the README file.

## **Question 1**: How do Taylor Swiftâ€™s single releases differ from the songs on the full albums?

### Introduction

Choosing what songs to release as the singles before an album comes out is a key piece of strategy for any artist. The single should be a good representative of the album as a whole, should be very popular, and should leave the listener eager to hear the entire album. Many of Taylor Swift's most well known songs are her single releases, so we decided to see how her singles compare to the rest of her songs. We are interested to see if we can identify some components or aspects of songs that make them better candidates to be single releases, and in this way, we can understand Taylor Swift and her team's decision making process in a new way. To answer this question, we will use only the taylor_all_songs .csv file. Specifically, we will use the energy and tempo variables to compare single releases to album releases

### Approach

For the first plot, we use a barplot (geom_col) to compare the energy levels of songs, faceted based on whether the songs came out on a single release or on the regular album release. We chose this plot because it is makes it easy to compare the single energy values to the regular album energy values. Additionally, it makes it easy enables the reader to compare the energy values of singles or from albums across all of Taylor Swift's releases. We thought this would be a great visualization strategy because of how easy these comparisons can be made. For example, we can see that, on average, the single releases from the album 1989 were .09 higher than that of the 1989 album. Also, we can see that the single releases of Fearless (Taylor's Version) and the single releases from the original Fearless have a difference of .15 in their energy score.

For the second plot, we use a Ridgeline plot (geom_density_ridges) to compare the tempo of songs released on an album versus as a single release. For this visualization, we chose a ridgeline plot because of the way it conveys the distribution of songs over the tempo range. With the two curves on the same plot, it makes it easy to see where they trend similarly and where they are different. This choice of ridgeline is great because it enables the reader to visualize how Taylor Swift's songs range in tempo based on their method of release.

### Analysis

Load in Packages and Data

```{r}
#| label: load-pkgs-and-data

library(tidyverse)
library(ggridges)

taylor_album_songs <- readr::read_csv('data/taylor_album_songs.csv', show_col_types = FALSE)
taylor_all_songs <- readr::read_csv('data/taylor_all_songs.csv', show_col_types = FALSE)
taylor_albums <- readr::read_csv('data/taylor_albums.csv', show_col_types = FALSE)


```

Plot 1 (wrangle and plot)

```{r}
#| label: question1a-wrangle-and-plot

taylor_all_songs_including_singles <- taylor_all_songs |>
  drop_na(album_name) |>
  mutate(is_single = !(is.na(single_release)))

taylor_albums_energy <- taylor_all_songs_including_singles |>
  drop_na(energy) |>
  group_by(album_name) |>
  summarise(album_energy = mean(energy))

taylor_singles_energy <- taylor_all_songs_including_singles %>%
  filter(is_single == TRUE) %>%
  group_by(album_name) %>%
  summarise(singles_energy = mean(energy))


plot1a_data <- merge(taylor_albums_energy, taylor_singles_energy)


plot1a_data <- plot1a_data |>
  pivot_longer(
    cols = c("album_energy", "singles_energy"),
    names_to = "song_type",
    values_to = "energy"
  ) |>
  mutate(
    song_type = fct_recode(song_type, "Album" = "album_energy", "Single" = "singles_energy")
  )

plot1a_data <- plot1a_data |>
  mutate(album_name = factor(album_name, levels = c("Taylor Swift", "Fearless",  "Fearless (Taylor's Version)",
                                                    "Speak Now", "Red", "1989", "reputation",
                                                    "Lover", "folklore", "evermore", "Midnights")))

ggplot(plot1a_data, aes(x = album_name, y = energy, fill = album_name)) +
  geom_col(position = "dodge") +
  geom_text(aes(label = round(energy, 2)), position = position_dodge(width = 0.9), vjust = -0.5, size = 2) +
  facet_wrap(~song_type) +
  scale_fill_manual(values = c("#4497BA", "#BD9365", "#5F4A30", "#704073",
                               "#982F47", "#7B96AF", "#0A0A0A", "#DEA9C9",
                               "#4D4D4D", "#ACA38D", "#A26A5B")) +
  theme_bw() +
  theme(axis.text.x = element_blank(),
        axis.ticks.x = element_blank()) +
  labs(
    title = "Energy Values of Taylor Swift Albums Versus Single Releases",
    subtitle = "Colored by Album",
    x = "Albums",
    y = "Energy",
    fill = "Album",
    caption = "Source: Tidy Tuesday Data"
  )

```

Plot 2 (wrangle and plot)

```{r}
#| label: question1b-wrangle-and-plot

plot1b_data <- taylor_all_songs_including_singles |>
  drop_na(tempo)


ggplot(plot1b_data, aes(x = tempo, y = is_single, fill = is_single)) +
  geom_density_ridges(show.legend = FALSE) +
  scale_fill_manual(values = c("#4D4D4D", "#DEA9C9")) +
  scale_y_discrete(labels = c("Album", "Single")) +
  theme_bw() +
  labs(
    title = "Tempo Distribution of Taylor Swift Songs",
    subtitle = "191 songs appearing only on an album versus 47 single releases",
    x = "Tempo",
    y = "Release Type",
    caption = "Source: Tidy Tuesday Data"
  ) 
```

### Discussion

plot 1 says yada yada

plot 2 blah blah, it is evident that the curves for single released songs and album released songs share a general shape.

## **Question 2**: Title that relates to the question you're answering

### Introduction

(1-2 paragraphs): Introduction to the question and what parts of the dataset are necessary to answer the question. Also discuss why you're interested in this question.

### Approach

(1-2 paragraphs): Describe what types of plots you are going to make to address your question. For each plot, provide a clear explanation as to why this plot (e.g.Â boxplot, barplot, histogram, etc.) is best for providing the information you are asking about. The two plots should be of different types, and at least one of the two plots needs to use either color mapping or facets.

### Analysis

(2-3 code blocks, 2 figures, text/code comments as needed): In this section, provide the code that generates your plots. Use scale functions to provide nice axis labels and guides. You are welcome to use theme functions to customize the appearance of your plot, but you are not required to do so. All plots must be made with **ggplot2**. Do not use base R or lattice plotting functions.

### Discussion

(1-3 paragraphs): In the Discussion section, interpret the results of your analysis. Identify any trends revealed (or not revealed) by the plots. Speculate about why the data looks the way it does.
