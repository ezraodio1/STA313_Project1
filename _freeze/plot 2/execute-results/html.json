{
  "hash": "e474ddd0e0e2d3a1734021ed2da01612",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Taylor Swift (Soon-to-be Kelce)\"\nsubtitle: \"Plot2\"\nformat: html\neditor: visual\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(ggrepel)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntaylor_album_songs <- readr::read_csv('data/taylor_album_songs.csv', show_col_types = FALSE)\ntaylor_all_songs <- readr::read_csv('data/taylor_all_songs.csv', show_col_types = FALSE)\ntaylor_albums <- readr::read_csv('data/taylor_albums.csv', show_col_types = FALSE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntaylor_albums_stats <- taylor_all_songs |>\n  drop_na(energy, valence) |>\n  group_by(album_name) |>\n  summarise(\n    album_energy = mean(energy),\n    album_valence = mean(valence)\n  )\n\nplot2a_data <- merge(taylor_albums, taylor_albums_stats)\n\nplot2a_data <- plot2a_data |>\n  pivot_longer(\n    cols = c(\"album_energy\", \"album_valence\"),\n    names_to = \"song_attribute\",\n    values_to = \"attribute_value\"\n  ) |>\n  mutate(\n    song_attribute = fct_recode(song_attribute, \"energy\" = \"album_energy\", \"valence\" = \"album_valence\"),\n    album_name = factor(album_name, \n                        levels = c(\"Midnights\",  \"evermore\", \"folklore\",\n                                   \"Lover\", \"reputation\", \"1989\", \n                                   \"Red\", \"Speak Now\", \n                                   \"Fearless (Taylor's Version)\", \n                                   \"Fearless\", \"Taylor Swift\", \n                                   \"The Taylor Swift Holiday Collection\",\n                                   \"Red (Taylor's Version)\"))\n  )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(plot2a_data, aes(x = album_release)) +\n  geom_line(aes(y = attribute_value), color = \"#4D4D4D\", size = 2) +\n  geom_point(aes(y = attribute_value, color = album_name), size = 7, shape = 18) +\n  geom_smooth(aes(y = attribute_value), method = \"lm\", se = FALSE, color = \"#E3183790\", size =2, linetype = \"dashed\") +\n  geom_label_repel(aes(y = attribute_value, label = album_name, fill = album_name), color = \"white\", size = 3, \n                   nudge_y = 0.1, nudge_x = 100) +\n  scale_y_continuous(breaks = seq(0.0, 1.0, by = 0.1), limits = c(0, 1)) +\n  scale_x_date(date_breaks = \"1 year\", date_labels = \"%Y\") +\n  scale_color_manual(values = c(\"#A26A5B\", \"#ACA38D\", \"#4D4D4D\", \"#DEA9C9\", \n                               \"#0A0A0A\", \"#7B96AF\", \"#982F47\", \"#704073\", \n                               \"#5F4A30\", \"#BD9365\", \"#4497BA\", \"#BA372E\", \"#903F31\")) +\n  scale_fill_manual(values = c(\"#A26A5B\", \"#ACA38D\", \"#4D4D4D\", \"#DEA9C9\", \n                               \"#0A0A0A\", \"#7B96AF\", \"#982F47\", \"#704073\", \n                               \"#5F4A30\", \"#BD9365\", \"#4497BA\", \"#BA372E\", \"#903F31\")\n  ) +\n  labs(\n    title = \"Taylor Swift album attributes over time\",\n    x = \"Album Release Date\"\n  ) +\n  theme(\n    axis.title.y = element_blank(),\n    panel.grid.minor = element_blank(),\n    legend.position = \"none\",\n    plot.title = element_text(size = 15, face = \"bold\", hjust = 0.5),\n    axis.title.x = element_text(vjust = -1, size = 12),\n    strip.text = element_text(size = 12)\n  ) +\n  facet_wrap(~song_attribute, ncol = 1, labeller = \n               labeller(song_attribute = c(energy = \"Attribute: Energy\", valence = \"Attribute: Valence\"))\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nâ„¹ Please use `linewidth` instead.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](plot-2_files/figure-html/plot2a_valence_energy_change_over_time-1.png){width=1056}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#Albums we want to consider for plot 2b (only albums in Tidy Data with original & re-released)\noriginal_and_rereleased_albums <- c(\"Red\", \"Red (Taylor's Version)\", \"Fearless\", \"Fearless (Taylor's Version)\")\n\n#Wrangling the data for plot 2b\nplot2b_data <- subset(taylor_albums, album_name %in% original_and_rereleased_albums) |>\n  mutate(user_score = user_score*10, \n         taylor_owned = ifelse(grepl(\"Taylor's Version\", album_name), \"Taylor's Version\", \"Scooter Owned\"), \n         album = case_when(grepl(\"Red\", album_name) ~ \"Red\", \n                           grepl(\"Fearless\", album_name) ~ \"Fearless\", \n                           TRUE ~ \"\" )) |>\n  select(album, metacritic_score, user_score, taylor_owned) \n\n#Pivoting longer to be able to put score on y-axis for plot 2b\nplot2b_data <- plot2b_data |>\n  pivot_longer(\n    cols = c(\"metacritic_score\", \"user_score\"), \n         names_to = \"score_type\", \n         values_to = \"score\") |>\n  mutate(\n    score_type = fct_recode(score_type, \"metacritic\" = \"metacritic_score\", \"user\" = \"user_score\")\n  )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(plot2b_data, aes(x= score_type, y = score, fill = taylor_owned)) + \n  geom_col(position = \"dodge\") + \n  geom_text(aes(label = score), position = position_dodge(width = 0.9), vjust = -0.5, size = 3 ) +\n  facet_wrap(~album)+ \n  scale_fill_manual(values = c(\"#4D4D4D\", \"#DEA9C9\")) +\n  theme_bw() +\n  labs(\n    title = \"Original versus Taylor's Score Comparison\",\n    x = \"Type of Score\",\n    y = \"Score\",\n    fill = \"Taylor's Version?\",\n    caption = \"Source: Tidy Tuesday Data\"\n  )\n```\n\n::: {.cell-output-display}\n![](plot-2_files/figure-html/plot2b-plotting-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "plot-2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}